name: Earn protocol Install, lint, test and deploy pipeline

on:
  push:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x.x]
    
    env:
      MAINNET_NODE_URL: ${{ secrets.MAINNET_NODE_URL}}
      COINMARKETCAP_API: ${{ secrets.COINMARKETCAP_API}}
      MNEMONIC: ${{ secrets.MNEMONIC}}

    steps:
      - name: Checkout Use Node.js ${{ matrix.node-version}}
        uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: '**/node_modules'
          key: npm-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: npm-v2-
      - name: Install
        run: |
          yarn install --frozen-lockfile
      - name: Lint
        run: |
          yarn lint
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        if: always()
        with:
          name: Lint
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
  compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x.x]
    
    env:
      MAINNET_NODE_URL: ${{ secrets.MAINNET_NODE_URL}}
      COINMARKETCAP_API: ${{ secrets.COINMARKETCAP_API}}
      MNEMONIC: ${{ secrets.MNEMONIC}}

    steps:
      - name: Checkout Use Node.js ${{ matrix.node-version}}
        uses: actions/checkout@v2
        with:
         token: ${{secrets.PAT}}
         submodules: recursive

      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: '**/node_modules'
          key: npm-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: npm-v2-
      - name: Install
        run: |
          yarn install --frozen-lockfile
      - name: Compile
        run: |
          yarn compile
      - name: Google Chat Notification
        uses: Co-qn/google-chat-notification@releases/v1
        if: always()
        with:
          name: Compile
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: ${{ job.status }}
  test-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x.x]
    
    env:
      MAINNET_NODE_URL: ${{ secrets.MAINNET_NODE_URL}}
      COINMARKETCAP_API: ${{ secrets.COINMARKETCAP_API}}
      REPORT_GAS: true
      MNEMONIC: ${{ secrets.MNEMONIC}}
      STAGING_NETWORK_URL: ${{secrets.STAGING_NETWORK_URL}}

    steps:
      - name: Checkout Use Node.js ${{ matrix.node-version}}
        uses: actions/checkout@v2
        with:
         token: ${{secrets.PAT}}
         submodules: recursive
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache
        with:
          path: '**/node_modules'
          key: npm-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: npm-v2-
      - name: Install
        run: |
          yarn install --frozen-lockfile
      - name: Test
        run: |
          SKIP_LOAD=true TS_NODE_TRANSPILE_ONLY=1 yarn hardhat --max-memory 4096 test ./test/1_ethereum/sushiswap-farm-adapter.spec.ts
          SKIP_LOAD=true TS_NODE_TRANSPILE_ONLY=1 yarn hardhat --max-memory 4096 test ./test/1_ethereum/aave-v1-adapter.spec.ts
          SKIP_LOAD=true TS_NODE_TRANSPILE_ONLY=1 yarn hardhat --max-memory 4096 test ./test/1_ethereum/aave-v2-adapter.spec.ts
          SKIP_LOAD=true TS_NODE_TRANSPILE_ONLY=1 yarn hardhat --max-memory 4096 test ./test/1_ethereum/compound-adapter.spec.ts
          SKIP_LOAD=true TS_NODE_TRANSPILE_ONLY=1 yarn hardhat --max-memory 4096 test ./test/1_ethereum/curve-adapter.spec.ts
#       - name: Add public IP to AWS security group
#         uses: sohelamin/aws-security-group-add-ip-action@master
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: 'us-east-1'
#           aws-security-group-id: ${{ secrets.AWS_SECURITY_GROUP_ID }}
#           port: '8545'
#           to-port: ''
#           protocol: 'tcp'
#           description: 'GitHub Action'
#       - name: Deploy
#         run: |
#           yarn setup:staging
#       - name: Google Chat Notification
#         uses: Co-qn/google-chat-notification@releases/v1
#         if: always()
#         with:
#           name: Test & Deploy
#           url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
#           status: ${{ job.status }}
