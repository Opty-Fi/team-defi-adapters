{
  "title": "Test DeFi Adapter",
  "description": "Test cases for DeFi adapters.",
  "stories": [
    {
      "description": "getDepositAllCodes() with 100% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner"
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with 0.1% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with 100% pool investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {
            "maxDepositPoolPct": "10000"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {},
          "executer": "owner"
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with 0.9% pool investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {
            "maxDepositPoolPct": "90"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {},
          "executer": "owner"
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with 0 investment limit (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": "=0"
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with investment limit (less than the deposit amount) (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "<"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositAllCodes() with investment limit (more than the deposit amount) (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": ">"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getWithdrawAllCodes() with 100% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": "=0"
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": ">0"
        }
      ],
      "cleanActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with 100% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "args": {},
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with 0.1% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with 100% pool investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {
            "maxDepositPoolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with 0.9% pool investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {
            "maxDepositPoolPct": "90"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositPoolPct(address,uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with 0 investment limit (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "0"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with investment limit (less than the deposit amount) (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": "<"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getDepositSomeCodes() with investment limit (more than the deposit amount) (mode=number)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "0"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositAmount(address,address,uint256)",
          "args": {
            "maxDepositAmount": ">"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getWithdrawSomeCodes() with 100% protocol investment limit (mode=pct)",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "wait10000Seconds",
          "executer": "",
          "expect": "",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawSomeCodes(address,address,address,uint256)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolTokenBalance(address,address,address)",
          "executer": "owner",
          "expectedValue": "=0"
        },
        {
          "contract": "erc20",
          "action": "balanceOf(address)",
          "executer": "owner",
          "expectedValue": ">0"
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getUnderlyingTokens() should return same underlying tokens as there in lp contracts",
      "setActions": [
        {
          "contract": "adapter",
          "action": "getUnderlyingTokens(address,address)",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "calculateAmountInLPToken() should return amount in Lp token equivalent for specified deposit amount",
      "setActions": [
        {
          "contract": "adapter",
          "action": "calculateAmountInLPToken(address,address,uint256)",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "getPoolValue() should return the pool value of lp contract",
      "setActions": [
        {
          "contract": "adapter",
          "action": "getPoolValue(address,address)",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "getLiquidityPoolToken() should return liquidity pool token address",
      "setActions": [
        {
          "contract": "adapter",
          "action": "getLiquidityPoolToken(address,address)",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "getSomeAmountInToken() should return equivalent value of underlying token for given amount of lpToken",
      "setActions": [
        {
          "contract": "adapter",
          "action": "getSomeAmountInToken(address,address,uint256)",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    },
    {
      "description": "getAllAmountInToken() should return value in underlying token for all the lpTokens held",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getAllAmountInToken(address,address,address)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "isRedeemableAmountSufficient() should return false if lp token redeem amt > balance in underlying tokens",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "isRedeemableAmountSufficient(address,address,address,uint256)",
          "executer": "owner",
          "expectedValue": ">"
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "isRedeemableAmountSufficient() should return true if lp token redeem amt < balance in underlying tokens",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "isRedeemableAmountSufficient(address,address,address,uint256)",
          "executer": "owner",
          "expectedValue": "<"
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "calculateRedeemableLPTokenAmount() should return the redeemable lp token amount on the basis of lp token balance",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "calculateRedeemableLPTokenAmount(address,address,address,uint256)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetWithdrawAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ]
    },
    {
      "description": "getBorrowAllCodes() should borrow some amount of borrow token",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetBorrowAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "borrowToken",
          "action": "borrowTokenBalance",
          "executer": "owner",
          "expectedValue": ">0"
        }
      ],
      "cleanActions": [
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "executer": "",
          "expect": "",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetRepayAndWithdrawAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {},
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnTokens",
          "executer": "",
          "expect": "",
          "message": ""
        }
      ]
    },
    {
      "description": "getAllAmountInTokenBorrow() should return value in underlying token for all the tokens borrowed",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetBorrowAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "wait10000Seconds",
          "executer": "",
          "expect": "",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getAllAmountInTokenBorrow(address,address,address,address,uint256)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "executer": "",
          "expect": "",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetRepayAndWithdrawAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {},
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnTokens",
          "executer": "",
          "expect": "",
          "message": ""
        }
      ]
    },
    {
      "description": "getSomeAmountInTokenBorrow() should return value in underlying token for some of the tokens borrowed",
      "setActions": [
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {
            "mode": "1"
          },
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {
            "maxDepositProtocolPct": "10000"
          },
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetDepositAllCodes(address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetBorrowAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "wait10000Seconds",
          "executer": "",
          "expect": "",
          "message": ""
        }
      ],
      "getActions": [
        {
          "contract": "adapter",
          "action": "getSomeAmountInTokenBorrow(address,address,address,uint256,address,uint256)",
          "executer": "owner",
          "expectedValue": {}
        }
      ],
      "cleanActions": [
        {
          "contract": "",
          "action": "fundTestDeFiAdapterContract",
          "executer": "",
          "expect": "",
          "message": ""
        },
        {
          "contract": "TestDeFiAdapter",
          "action": "testGetRepayAndWithdrawAllCodes(address,address,address,address)",
          "executer": "owner",
          "expect": "success",
          "message": ""
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolMode(uint8)",
          "args": {},
          "executer": "owner"
        },
        {
          "contract": "adapter",
          "action": "setMaxDepositProtocolPct(uint256)",
          "args": {},
          "expect": "success",
          "message": ""
        },
        {
          "contract": "",
          "action": "burnTokens",
          "executer": "",
          "expect": "",
          "message": ""
        }
      ]
    }
  ],
  "adapterStandaloneStories": [
    {
      "description": "[canStake()] - should return whether stake is allowed or not",
      "setActions": [
        {
          "contract": "adapter",
          "action": "canStake(address)",
          "args": {},
          "executer": "",
          "expect": "success",
          "message": ""
        }
      ],
      "getActions": [],
      "cleanActions": []
    }
  ]
}
