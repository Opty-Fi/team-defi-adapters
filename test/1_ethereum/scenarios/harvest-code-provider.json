{
  "title": "HarvestCodeProvider",
  "description": "Test cases for HarvestCodeProvider contract",
  "stories": [
    {
      "description": "GetHarvestCodes should return the correct code to harvest a specific balance in reward token for the underlying token",
      "setActions": [
        {
          "action": "fundTestHarvestCodeProviderContract",
          "args": {
            "token": "reward"
          }
        },
        {
          "action": "testGetHarvestCodes(address,address,address,uint256)",
          "args": {}
        }
      ],
      "getActions": [
        {
          "action": "balanceOf(address)",
          "args": {
            "token": "reward"
          }
        },
        {
          "action": "balanceOf(address)",
          "args": {
            "token": "underlyingToken"
          }
        }
      ],
      "cleanActions": [
        {
          "action": "burnTokens",
          "args": {
            "token": "underlyingToken"
          }
        }
      ]
    },
    {
      "description": "GetAddLiquidityCodes should return the correct code to add liquidity into a pool and get LP tokens",
      "setActions": [
        {
          "action": "fundTestHarvestCodeProviderContract",
          "args": {
            "token": "underlyingTokens"
          }
        },
        {
          "action": "testGetAddLiquidityCodes(address,address,address)",
          "args": {}
        }
      ],
      "getActions": [
        {
          "action": "balanceOf(address)",
          "args": {
            "token": "underlyingTokens"
          }
        },
        {
          "action": "balanceOf(address)",
          "args": {
            "token": "pair"
          }
        }
      ],
      "cleanActions": [
        {
          "action": "burnTokens",
          "args": {
            "token": "pair"
          }
        }
      ]
    },
    {
      "description": "getOptimalTokenAmount should return the equivalent amount in Y token given a specific amount in X token",
      "setActions": [
        {
          "action": "fundTestHarvestCodeProviderContract",
          "args": {
            "token": "reward"
          }
        }
      ],
      "getActions": [
        {
          "action": "getOptimalTokenAmount(address,address,uint256)",
          "args": {}
        }
      ],
      "cleanActions": [
        {
          "action": "burnTokens",
          "args": {
            "token": "reward"
          }
        }
      ]
    },
    {
      "description": "rewardBalanceInUnderlyingTokens should return the equivalent amount in Y token given a specific amount in X reward token",
      "setActions": [
        {
          "action": "fundTestHarvestCodeProviderContract",
          "args": {
            "token": "reward"
          }
        }
      ],
      "getActions": [
        {
          "action": "rewardBalanceInUnderlyingTokens(address,address,uint256)",
          "args": {}
        }
      ],
      "cleanActions": [
        {
          "action": "burnTokens",
          "args": {
            "token": "reward"
          }
        }
      ]
    },
    {
      "description": "getWETHInToken should return the equivalent amount in X token given a specific amount in WETH",
      "setActions": [
        {
          "action": "fundTestHarvestCodeProviderContract",
          "args": {
            "token": "weth"
          }
        }
      ],
      "getActions": [
        {
          "action": "getWETHInToken(address,uint256)",
          "args": {}
        }
      ],
      "cleanActions": [
        {
          "action": "burnTokens",
          "args": {
            "token": "weth"
          }
        }
      ]
    }
  ]
}
